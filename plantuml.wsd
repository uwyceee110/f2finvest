@startuml duocilue
class Rule{
    g 
    name
    memo
    log
    is_to_return
    + update_params()
    + initialize()
    + handle_data()
    + before_trading_start()
    + after_trading_end()
    + process_initialize()
    + after_code_changed()
    + to_return()
    + on_sell_stock()
    + on_buy_stock()
    + before_clear_position()
    + on_clear_position()
    + on_handle_data_exit()
    + record()
    + set_g()
    + __str__()
}

class Group_rules{
    rules
    cs_enabled, cs_name
    cs_memo, cs_class_type, cs_param
    + update_params()
    + initialize()
    + handle_data()
    + before_trading_start()
    + after_trading_end()
    + process_initialize()
    + after_code_changed()
    + check_chang()
    + on_sell_stock()
    + before_clear_position()
    + on_buy_stock()
    + on_clear_position()
    + before_adjust_start()
    + after_adjust_end()
    + create_rule()
    + create_rules()
    + show_strategy()
    + get_obj_by_name()
    + __str__()
}

Rule <|-- Group_rules : generalization

class Global_variable{
    context
    _owner
    stock_pindexs
    op_pindexs
    buy_stocks
    sell_stocks
    is_empty_position
    run_day
    position_record
    + __init__()
    + open_position()
    + order()
    + close_position()
    + get_obj_by_name()
    + on_log()
    + get_run_day_count()
}

class Strategy_Group{
    + initialize()
    + handle_data_level()
    + handle_data()
    + set_g()
}
Group_rules <|-- Strategy_Group : generalization

class Weight_Base{
    + weight()
}
Rule <|-- Weight_Base : generalization

class Time_condition{
    + __init__()
    + update_params()
    + handle_data()
    + __str__()
}
Weight_Base <|-- Time_condition : generalization

class Period_condition{
    +__init__()
    + update_params()
    + handle_data()
    + on_sell_stock()
    + _on_clear_position_init__()
    + __str__()
}
Weight_Base <|-- Period_condition : generalization

class Stop_loss_by_price{
    index
    day_count
    multiple
    is_day_stop_loss_by_price
    + __init__()
    + update_params()
    + handle_data()
    + before_trading_start()
    + __str__()
}
Rule <|-- Stop_loss_by_price : generalization

class Mul_index_stop_loss{
    _indexs
    _min_rate
    _n
    + __init__()
    + update_params()
    + handle_data()
    + after_trading_end()
    + __str__()
}
Rule <|-- Mul_index_stop_loss

class Filter_query{
    + filter()
}
Rule <|-- Filter_query

class Filter_stock_list{
    + filter()
}
Rule <|-- Filter_stock_list

class Pick_stocks2{
    has_run
    + __init__()
    + handle_data()
    + before_trading_start()
    + __str__()
}
Group_rules <|-- Pick_stocks2

class FD_Factor{
    + __init__()
}

class Pick_financial_data{
    + filter()
    + __str__()
}
Filter_query <|-- Pick_financial_data

class Filter_financial_data{
    + filter()
    + __str__()
}
Filter_stock_list <|-- Filter_financial_data

class Filter_gem{
    + filter()
    + __str__()
}
Filter_stock_list <|-- Filter_gem

class Filter_common{
    + filter()
    + __str__()
}
Filter_stock_list <|-- Filter_common

class SortType{

}

class PriceType{

}

class SortBase{
    +weight()
    +is_asc()
    +_sort_type_str()
    +sort()
}
Rule <|-- SortBase

class SortRules{
   +filter()   
   +__str__()   
}
Group_rules <|-- SortRules
Filter_stock_list <|-- SortRules

class Sort_growth_rate{
    +sort()
    +__str__()
}
SortBase <|-- Sort_growth_rate

class Sort_price{
    +sort()
    +__str__()
}
SortBase <|-- Sort_price

class Sort_turnover_ratio{
    +sort()
    +__str__()
}
SortBase <|-- Sort_turnover_ratio

class Sort_financial_data{
    +sort()
    +__str__()
}
SortBase <|-- Sort_financial_data

class Filter_buy_count{
    +__init__()
    +update_params()
    +filter()
    +__str__()
}
Filter_stock_list <|-- Filter_buy_count
class Adjust_position{
    +handle_data()
}
Group_rules <|-- Adjust_position
class Adjust_expand{
    +before_adjust_start()
    +after_adjust_end()
}
Rule <|-- Adjust_expand
class Sell_stocks{
    +handle_data()
    +adjust()
    +__str__()
}
Rule <|-- Sell_stocks
class Buy_stocks{
    +__init__()
    +update_params()
    +handle_data()
    +adjust()
    +after_trading_end()
    +__str__()
}
Rule <|-- Buy_stocks
class Op_stocks_record{
    +__init__()
    +on_buy_stock()
    +on_sell_stock()
    +after_adjust_end()
    +after_trading_end()
    +merge_op_list()
}
Adjust_expand <|-- Op_stocks_record

class Show_postion_adjust{
    +after_adjust_end()
    +len()
    +len()
    +__str__()
}
Op_stocks_record <|-- Show_postion_adjust

class Set_sys_params{
    +__init__()
    +__str__()
}
Rule <|-- Set_sys_params

class Set_sys_params{
    +before_trading_start()
    +__str__()
}
Rule <|-- Set_slip_fee

class Show_position{
    +__init__()
    +after_trading_end()
    +on_sell_stock()
    +on_buy_stock()
    +__get_portfolio_info_text()
    +__str__()
}
Rule <|-- Show_position
class Stat{
    +__init__()
    +after_trading_end()
    +on_sell_stock()
    +reset()
    +watch()
    +report()
    +print_win_rate()
    +statis_most_win_percent()
    +statis_most_loss_percent()
    +statis_total_profit()
    +__str__()
}
Rule <|-- Stat

class Shipane_manager{
    +__init__()
    +update_params()
    +after_adjust_end()
    +on_clear_position()
    +after_trading_end()
    +get_rate_str()
    +_get_trader_portfolio_html()
    +_get_trader_portfolio_text()
}
Op_stocks_record <|-- Shipane_manager

class Shipane_Sync{
    +level()
    +initialize()
    +process_initialize()
    +handle_data()
}
Rule <|-- Shipane_Sync

class Purchase_new_stocks{
    +__init__()
    +update_params()
    +handle_data()
    +__str__()
}
Rule <|-- Purchase_new_stocks

class Email_notice{
    +__init__()
    +update_params()
    +before_adjust_start()
    +after_adjust_end()
    +after_trading_end()
    +on_clear_position()
    +__send_email()
    +__get_mail_text_before_adjust()
    +__get_portfolio_info_html()
    +__str__()
}
Op_stocks_record <|-- Email_notice

Strategy_Group .> Global_variable
Strategy_Group .> Pick_stocks2
Strategy_Group .> Time_condition
Strategy_Group .> Stop_loss_by_price
Strategy_Group .> Mul_index_stop_loss
Strategy_Group .> Period_condition
Strategy_Group .> Pick_financial_data
Strategy_Group .> Filter_gem
Strategy_Group .> Filter_common
Strategy_Group .> SortRules
Strategy_Group .> Sort_financial_data
Strategy_Group .> Sort_price
Strategy_Group .> Sort_growth_rate
Strategy_Group .> Sort_turnover_ratio
Strategy_Group .> Filter_buy_count
Strategy_Group .> Adjust_position
@enduml
